{{- /*
  # This template creates a set of services and ingress objects to represent the SBI Interface on Stratum on ILDs,
  # and creates a config map to mount a volume inside haproxy with partitioning lua code and sitemapping config file
  # see global.partitioning_proxies  in values file for this charts parent for details on this template.
*/}}
{{- range $proxy := .Values.global.partitioning.sites }}

{{- $local :=  eq $proxy.name $.Values.global.site }}  
{{- $ingressAndServiceName := print $proxy.name "-ingress-" (ternary "local" "remote" $local) }}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    haproxy-ingress.github.io/backend-protocol: h2
    haproxy-ingress.github.io/config-backend: |
      http-reuse always
      option nolinger
      option httpchk
      http-check connect proto h2 linger
{{- if  $local }}
      http-check send meth HEAD uri http://%s/oam/v1/operational_status?for_georegion={{- $.Values.global.geoRegion }} ver HTTP/2 hdr stratum-health-check true hdr Connection close
      http-check expect rstatus [0-9]+
{{- else }}
      http-check send meth GET uri http://%s/oam/v1/operational_status?for_georegion={{- $.Values.global.geoRegion }} ver HTTP/2 hdr stratum-health-check true hdr Connection close
      http-check expect status 200
{{- end }}
      default-server max-reuse 500 fall 1 rise 5
      retries 3
      retry-on conn-failure empty-response
{{- if  $local }}
      option redispatch
{{- end }}
  name: {{ $ingressAndServiceName }}
spec:
  ingressClassName:  {{ $.Values.global.partitioning.ingressClassName }}
  rules:
  - http:
      paths:
      - backend:
          service:
            name: {{ $ingressAndServiceName }}
            port:
              number: 80
        path: /{{ $proxy.name }}
        pathType: Exact
---

apiVersion: v1
kind: Service
metadata:
  name: {{ $ingressAndServiceName }}
spec:
  ports:
    - name: sbi
      port: 443
      protocol: TCP
      targetPort: 3443
    - name: h2c
      port: 80
      protocol: TCP
{{- if $local }}
      targetPort: 3480
  selector:
    name: {{ $.Values.global.ild.pod_name }}
{{- else }}
      targetPort: 80
---
apiVersion: v1
kind: Endpoints
metadata:
  name: {{ $ingressAndServiceName }}
  labels:
    kubernetes.io/service-name: {{ $ingressAndServiceName }}
subsets:
- addresses:
  - ip: {{ $proxy.ingress_ip }}
  ports:
  - name: h2c
    port: 80
    protocol: TCP
  - name: sbi
    port: 443
    protocol: TCP
{{- end }}


{{- end }} 

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    haproxy-ingress.github.io/backend-protocol: h2
    haproxy-ingress.github.io/config-backend: |
      http-request set-var(req.client_ip) fc_src  # The client IP address.
      http-request set-var(req.url) url           # Store the full URL.
      http-request use-service lua.partition_not_found
  name: haproxy-no-partition
spec:
  ingressClassName:  {{ $.Values.global.partitioning.ingressClassName }}
  rules:
  - http:
      paths:
      - backend:
          service:
            name: {{ .Release.Name }}-haproxy-ingress-no-partition
            port:
              number: 8080
        path: /partition-not-found
        pathType: Exact
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opwv-haproxy-files
data:
  site_mapping.txt: |-
{{- range $partition := .Values.global.partitioning.partitions }}
{{- range $index, $site  := $partition.sitesByPriority }}
{{- range $partition.imsiPatterns }}
    {{ $site }}:{{ . }}:{{ add 1 $index }}
{{- end }}
{{- end }}
{{- end }}
{{ (.Files.Glob "lua/{base64,stratum,stratum_logging,stratum_mappings,stratum_backends,stratum_callbacks.lua,string_utils}.lua").AsConfig | indent 2 }}
